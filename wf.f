C Module to create 

      module dirs
      contains
      function dirname(number)
      integer :: number
      character(len=6)  :: dirname

      !Cast the (rounded) number to string using 6 digits and
      ! leading zeros
      write (dirname, '(I6)')  number
      end function
      end module


      PROGRAM WFOEDM

      use dirs
C
C...  One electron diatomic molecule wavefunction calculatino
C...  Original Author - J.D. POWER, modified and adapted for better numerical performance by Ruihan Wang @ UGA
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/BLK1/ PP(999),CSEP(999),RR(999),ICVGY(999),ICVGX(999)
      COMMON/WF/ ZA,ZB,N,L,M
      COMMON/BLK2/ IETOT,NOPTS,IWFN,RJUMP,SIGN,RSTART
C
      CHARACTER*2 CENTER(2),EOUT(2),YN*1
      INTEGER FCHAIN,GCHAIN
      CHARACTER*10 DUM(8)
      CHARACTER(len=255) :: path,newpath
      LOGICAL*1 PT1,PT2,PT3
      DIMENSION IACDFT(4),IACMAX(4),IACMIN(4),IAC(4),AC(4)
      EQUIVALENCE (AC(1),PAC),(AC(2),CAC),(AC(3),ACCIN),(AC(4),ACCOUT)
      DATA CENTER,EOUT/' A',' B',' W',' E'/
      DATA IACDFT,IACMAX,IACMIN/2*11,2*10,2*13,2*10,2*10,2*10/
      DATA IIN,IOUT,IHOLD,IXTRAP,ITMAX/2,3,1,10,50/

      character(len=10) :: file_id
      character(len=50) :: file_name_full
      character(len=50) :: file_name_pot




      OPEN(77,FILE='WF.DAT')
C
1     continue
C     READ(IIN,501)ZA,ZB,N,L,M,IETOT,IRISK,IPRINT,IWFN,RJ

      READ(77, *) QU,N,L,M,IETOT,IRISK,IPRINT,IWFN,RJ

      write(file_id, '(i0,i0,i0)') N,L,M
      file_name_pot = 'pot_' // trim(adjustl(file_id)) // '.dat'
      file_name_full = 'full_' // trim(adjustl(file_id)) // '.dat'
C working directory manipulation
      call system("mkdir -p WF/"//adjustl(trim(dirname(INT(QU)))))
      CALL chdir("WF/"//adjustl(trim(dirname(INT(QU)))))
      OPEN(IHOLD,FILE =file_name_pot,STATUS='unknown')
      OPEN(IOUT,FILE = file_name_full,STATUS='unknown')
      OPEN(IOEDM,FILE='IOEDM')
501   FORMAT(D12.6,7I2,F10.0)
      ZA = 1.D0
      ZB = QU
C
C     ZA,ZB ... NUCLEAR CHARGES
C     N,L,M ... UNITED ATOM QUANTUM NUMBERS
C     IETOT.EQ.0   OUTPUT OF ELECTRONIC ENERGY  W=E-ZA*ZB/R ,
C     IETOT.NE.0   OUTPUT OF THE TOTAL ENERGY E.
C     IRISK.NE.0   SLIGHTLY SPEEDS UP THE RUN BY MODIFYING CONVERGENCE TEST.
C     IPRINT=0     DEFAULT, MINIMUM PRINTOUT
C           =-1    VALUES OF P, C AND THEIR CHANGES PRINTED
C           =-2    ABOVE, PLUS F,G,THEIR DERIVATIVES AND CUTOFF PARAMETERS.
C           =-3    ABOVE, PLUS CONTINUED FRACTION APPROXIMATES.
C           =+J    ESSENTIALLY SAME AS -2
C     IWFN.NE.0    WAVE FUNCTIONS ARE CALCULATED/KJ.
C     RJ.NE.0 ...  RJUMP IS REPLACED BY RJ
C
      IF(ZA.LE.0.D0)GO TO 15
      PT1=.FALSE.
      PT2=.FALSE.
      PT3=.FALSE.
      IF(IPRINT.LE.-1)PT1=.TRUE.
      IF(IPRINT.LE.-2)PT2=.TRUE.
      IF(IPRINT.LE.-3)PT3=.TRUE.
CK
C      PT1=.FALSE.
CK
      IGO=1
      IF(ZA.EQ.ZB)IGO=2
      IF(M.LT.0)M=-M
      LSTART=M
      IF((L-M).NE.2*((L-M)/2))LSTART=M+1
      IF(ZA.GE.ZB)GO TO 2
C ... SOME SUBROUTINES REQUIRE THAT ZA.GE.ZB AND THAT M.GE.0
      Z=ZA
      ZA=ZB
      ZB=Z
2     WRITE(IOUT,601)ZA,ZB,N,L,M,IETOT,IRISK,IPRINT,IWFN,RJ
*     WRITE(*,601)ZA,ZB,N,L,M,IETOT,IRISK,IPRINT,IWFN,RJ
601   FORMAT(' ZA,ZB,N,L,M,IETOT,IRISK,IPRINT,IWFN,RJ'/1X,2D20.12,
     & 7I3,F10.4)
C     WRITE(*,6011)
6011  FORMAT('ENTER RSTART,IAC...FORMAT F10.0,4I2...BLANK FOR DEFAULT')
C     READ(IIN,502)RSTART,IAC
222   FORMAT(8A10)
      READ(77, * )RSTART,IAC
C     READ(*,502)RSTART,IAC
C     READ(*,*)RSTART,IAC
502   FORMAT(F10.0,4I2)
      DO 21 I=1,4
      IF(IAC(I).LT.IACMIN(I).OR.IAC(I).GT.IACMAX(I))IAC(I)=IACDFT(I)
      AC(I)=1.0D0/10.0D0**IAC(I)
21    CONTINUE
C
C...
C
      WRITE(IOUT,602)RSTART,PAC,CAC,ACCIN,ACCOUT
C     WRITE(*,602)RSTART,PAC,CAC,ACCIN,ACCOUT
602   FORMAT(' RSTART,PAC,CAC,ACCIN,ACCOUT   ',1PD11.4,1P4D8.1)
      Z=ZA+ZB
      NSAVE=NOPTS
      NOPTS=1
      RR(1)=RSTART
C...  ENTER VALUES OF R AT WHICH THE EIGENPARAMETERS WILL BE CALCULATED
C     WRITE(*,6021)
6021  FORMAT('ENTER...NPT,RINCR FORMAT...I3,F15.0')
C
C3     READ(IIN,503)NPT,RINCR
 3     READ(77, * )NPT,RINCR
      open(99,FILE="rvalue.dat")
      write(99,*) NPT
      do i = 1,NPT
         write(99,*) i*RINCR
      enddo

C3     READ(*,503)NPT,RINCR
C3    READ(*,*)NPT,RINCR
503   FORMAT(I3,F15.0)
      IF(NPT.EQ.0)GO TO 5
      WRITE(IOUT,608)NPT,RINCR
C     WRITE(*,608)NPT,RINCR
608   FORMAT(' NPT,RINCR   ',I3,F12.8)
      ISTART=NOPTS+1
      NOPTS=NOPTS+NPT
      DO 4 I=ISTART,NOPTS
      RR(I)=RR(I-1)+RINCR
4     CONTINUE
C     GO TO 3
C...  IF INITIAL INCREMENT IS TOO LARGE, RELIABLE GUESSE FOR P AND C
C     AT RR(2) CANNOT BE OBTAINED IF WE START AT R=0.
5     IF(NOPTS.EQ.1)NOPTS=NSAVE
C...  IF NO POINTS HAVE BEEN ENTERED, USE THOSE FROM THE PREVIOUS RUN
      IF(RSTART.EQ.0.0D0.AND.RR(2)*Z/N.GT.1.0D0)GO TO 14
      IF(RSTART.NE.0.0D0.AND.RR(NOPTS).LT.0.01D0)GO TO 18
C
      CALL CORR(ZA,ZB,N,L,M,NS,KS,ICEN)
C
C...  THIS FINDS THE DISSOCIATION PRODUCTS OF THIS OEDM STATE.
      SIGN=(-1.D0)**(ICEN-1)
      ZZ=ZA*(2-ICEN)+ZB*(ICEN-1)
      ZP=ZA*(ICEN-1)+ZB*(2-ICEN)
      IDELTA=N-L-1-KS
C
C
      RJUMP=2*NS*NS*(1+2*DSQRT(ABS(ZP/ZZ)))/ABS(ZZ)
C
C
      CALL WRLG1(ZZ,ZP,NS,IDELTA,M,1.D0,W,W0,W1,W2,W3,W4,W5,W6)
C
C
      WRITE(IOUT,604)RJUMP
C     WRITE(*,604)RJUMP
604   FORMAT(' THE 1/R ASYMPTOTIC EXPANSION OF W IS VALID FOR R.GT.RJUMP
     & =',F6.2)
      WRITE(IOUT,605) W0,W1,W2,W3,W4,W5,W6
C     WRITE(*,605) W0,W1,W2,W3,W4,W5,W6
605   FORMAT(' COEF OF THE 1/R EXPANSION OF W'/1P4D18.10/1P3D18.10)
      IF(RSTART.NE.0.0D0.AND.RSTART.LT.RJUMP)GO TO 19
      IF(RJ.EQ.0.0D0)GO TO 39
      RJUMP=RJ
      WRITE(IOUT,624)RJ
C     WRITE(*,624)RJ
624   FORMAT(' SWITCH TO LARGE R Y(ETA) EXPANSION FOR R.GE.',F10.4)
39    IF(RSTART.NE.0.D0) GO TO 40
      PP(1)=0
      CSEP(1)=L*(L+1)
      ICVGX(1)=0
      ICVGY(1)=0
      ISTART=2
      GO TO 41
40    ISTART=1
      CALL WRLG2(RSTART,W)
      PP(1)=RSTART*DSQRT(-W/2)
      CSEP(1)=CRLG1(N,L,M,PP(1),RSTART*Z)
C
C...  BEGIN THE DO-LOOP OVER R VALUES
C
41    NR = NOPTS-ISTART+1
      WRITE(IOEDM,33) QU,N,L,M,NR
33    FORMAT(D12.6,3I3,I5)
      DO 10 I = ISTART,NOPTS
      R=RR(I)
      IF(IGO.EQ.3)IGO=1
      IF(IGO.EQ.1.AND.R.GE.RJUMP)IGO=3
C
C...  IGO=1,2, OR 3 RESPECTIVELY FOR HETERONUCLEAR SMALL R, HOMONUCLEAR
C...                OR HETERONUCLEAR LARGE R EXPANSION FOR Y(ETA).
C
      IF(I.EQ.IPRINT)PT2=.TRUE.
      IF(PT2)PT1=.TRUE.
      RZ=R*Z
      RZDIF=R*(ZA-ZB)*SIGN
C
C
C
      IF(I.GT.2)GO TO 6
      IF(I.EQ.1)GO TO 7
C...  ESTIMATES FOR P AND C AT R(2)
      IF(RSTART.NE.0.0D00)GO TO 51
      PP(2)=0.5D0*R*Z/N
C
C
C
      ZK=RZDIF*0.5D0/PP(2)
      IF(L.EQ.0)DC=2*(1-ZK*ZK)/3*PP(2)**2
      IF(L.NE.0)DC=2*(((L+1)**2-M*M)*((L+1)**2-ZK*ZK)/((L+1)*(L+L+3))
     &             -(L*L-M*M)*(L*L-ZK*ZK)/(L*(L+L-1)))/(L+L+1)*PP(2)**2
      CSEP(2)=CSEP(1)+DC
      GO TO 7
51    CALL WRLG2(RR(2),W)
      PP(2)=R*DSQRT(-W/2)
      CSEP(2)=CRLG2(PP(2),RR(2)*Z)
      GO TO 7
C...  EXTRAPOLATE FOR P AND C AT CURRENT R
6     NPT=MIN0(I,IXTRAP)
C...  USE DATA FROM THE IXTRAP(=10) PREVIOUS POINTS, IF AVAILABLE
      J=I+1-NPT
      CALL EXTRAP(RR(J),PP(J),NPT)
      CALL EXTRAP(RR(J),CSEP(J),NPT)
7     P=PP(I)
      C=CSEP(I)
C
C
      CALL CHAIN(FCHAIN,GCHAIN,IGO,RZ,RZDIF,N,L,M,KS,P,C)
C
      IF(PT1) WRITE(IOUT,620)R,FCHAIN,GCHAIN,P,C
C     IF(PT1) WRITE(*,620)R,FCHAIN,GCHAIN,P,C
620   FORMAT(' R,FCHAIN,GCHAIN, INITIAL P,C=',/,F10.5,2I3,2D20.12)
      KOUNT=0
C
      FCUT=0
      GCUT=0
8     CALL CTDFRN(IGO,P,C,RZ,RZDIF,M,FCHAIN,LSTART,ACCIN,FCUT,F,DFDC,
     &            DFDP,IOUT,PT3,NCVIN)
C
C
      CALL CTDFRN(4,P,C,RZ,RZDIF,M,GCHAIN,LSTART,ACCOUT,GCUT,G,DGDC,
     &            DGDP,IOUT,PT3,NCVOUT)
C
C
C
C
C...  BUILD AN ARRAY OF THE CONVERGENTS FOR TRANSFER TO SUB WFNC/KJ.
C
      ICVGY(I)=NCVIN
      ICVGX(I)=NCVOUT
C
      DENOM=DFDC*DGDP-DFDP*DGDC
      DELTAP=(F*DGDC-G*DFDC)/DENOM
      DELTAC=(G*DFDP-F*DGDP)/DENOM
C
C
C
      P=P+DELTAP
      C=C+DELTAC
      IF(PT1)WRITE(IOUT,621)P,C,DELTAP,DELTAC,NCVIN,NCVOUT
C     IF(PT1)WRITE(*,621)P,C,DELTAP,DELTAC,NCVIN,NCVOUT
621   FORMAT(' P,C,DELTAP,DELTAC=',/,2D20.12,1X,2D16.8/'   CTD. FRN.
     & CONVERGENTS     INNER=',I3,'   OUTER=',I3)
      IF(PT2)WRITE(IOUT,622)F,DFDC,DFDP,G,DGDC,DGDP
C     IF(PT2)WRITE(*,622)F,DFDC,DFDP,G,DGDC,DGDP
622   FORMAT(' F,DFDC,DFDP,G,DGDC,DGDP=',/,3D17.8,/,3D17.8)
C...  TEST FOR CONVERGENCE OF THE VALUES OF P AND C.
      IF(DABS(DELTAP)/(1+P).LT.PAC.AND.DABS(DELTAC)/(1+DABS(C)).LT.CAC)
     & GO TO 9
C
C
      KOUNT=KOUNT+1
      IF(KOUNT.GT.ITMAX) GO TO 16
C...  THE ITERATION WILL EASILY CONVERGE IN 3-4 CYCLES FOR ISOLATED ROOTS.
      FCUT=0.5D0*DABS(DENOM)*DMAX1(PAC*(1+P)/DABS(DGDC),CAC*(1+DABS(C))
     & /DABS(DGDP))
      GCUT=0.5D0*DABS(DENOM)*DMAX1(PAC*(1+P)/DABS(DFDC),CAC*(1+DABS(C))
     & /DABS(DFDP))
C

      IF(PT2) WRITE(IOUT,623)FCUT,GCUT
C     IF(PT2) WRITE(*,623)FCUT,GCUT
623   FORMAT(' FCUT,GCUT=',1P2D14.5)
      IF(IRISK.EQ.0) GO TO 8
C
C
C
      IF(DABS(F)*ACCIN/FCUT.LT.1.0D0.AND.DABS(G)*100*ACCOUT/GCUT.LT.
     & 1.0D0) GO TO 9
C
C
C
C
      GO TO 8
9     CSEP(I)=C

      C = -C+P*P
      WRITE(IOEDM,2330) R,P,C
2330  FORMAT(3E20.6)

10    PP(I)=P
      CSEP(I)=C
      CLOSE (IOEDM, STATUS='KEEP')

      call GRAVE
C
C...  THE DO-LOOP OVER R VALUES HAS BEEN COMPLETED
C
C...  STORE ENERGIES IN THE VECTOR PP
101   IF(RSTART.NE.0.0D0)GO TO 11
      PP(1)=-0.5D0*(Z/N)**2
11    DO 12 I=ISTART,NOPTS
      PP(I)=-2*(PP(I)/RR(I))**2
12    CONTINUE


C
C...  BEGIN PRINTING RESULTS
C
      WRITE(IOUT,603) ZA,ZB,N,L,M
C     WRITE(*,603) ZA,ZB,N,L,M
603   FORMAT(' ZA=',F3.1,'  ZB=',F3.1,'    UA QUANTUM NUMBERS  N=',I2,'
     & L=',I2,'  M=',I2)
      IF(IGO.NE.2) WRITE(IOUT,609) NS,KS,CENTER(ICEN)
C     IF(IGO.NE.2) WRITE(*,609) NS,KS,CENTER(ICEN)
609   FORMAT('  SA QUANTUM NUMBERS   NS=',I2,'  KS=',I2,'  FOR CENTRE',
     & A2/)
      IF(IGO.EQ.2) WRITE(IOUT,610) NS,KS
C     IF(IGO.EQ.2) WRITE(*,610) NS,KS
610   FORMAT('  SA QUANTUM NUMBERS   NS=',I2,'  KS=',I2/)
      JJ=1
      IF(IETOT.EQ.0)GO TO 13
C...  IF IETOT IS NON-ZERO, PRINT OUT THE TOTAL INSTEAD OF ELECTRONIC E
      JJ=2
      ZAB=ZA*ZB
      DO 17 I=ISTART,NOPTS
      PP(I)=PP(I)+ZAB/RR(I)
C     PP(I)=PP(I)*206.7686*27.11608
C     RR(I)=RR(I)/206.7686/1.89D-05
17    CONTINUE
      IF(ISTART.EQ.2)PP(1)=1.0D50
13    WRITE(IOUT,612) EOUT(JJ)
C     WRITE(*,612) EOUT(JJ)
612   FORMAT( / ,5X,'R',14X,A2,18X,'C',10X,'ICVGY  ICVGX'/)
      WRITE(IOUT,606)(RR(I),PP(I),CSEP(I),ICVGY(I),ICVGX(I),I=1,NOPTS)
      WRITE(IHOLD,6606)(RR(I),PP(I),I=1,NOPTS)
6606  FORMAT(e10.3,'  ',e15.8)
C     WRITE(*,606)(RR(I),PP(I),CSEP(I),ICVGY(I),ICVGX(I),I=1,NOPTS)
606   FORMAT(1H ,0PF9.4,2X,1P2D19.9,2I5)
C
C
      IF(IWFN.NE.0) CALL WFNC
      
C
C     WRITE(*,'(//,A\)')'ANOTHER RUN? (Y/N): '
C     READ(*,'(A)')YN
      yn = 'N'
      IF(YN.EQ.'Y'.OR.YN.EQ.'Y')GO TO 1
C.....OTHERWISE GETOUT.
      GO TO 15
C
14    WRITE(IOUT,607)
C     WRITE(*,607)
607   FORMAT(' RR(2)*Z/N.GT.1, SKIP TO THE NEXT RUN')
      GO TO 1
16    WRITE(IOUT,611)I,R
C     WRITE(*,611)I,R
611   FORMAT(' *** MAX NO. OF ITERATIONS EXCEEDED AT R(',I3,') =',
     & F15.9)
C...  PRINT OUT ANY RESULTS WHICH WERE OBTAINED.
      NOPTS=I-1
      GO TO 101
18    WRITE(IOUT,613)RR(NOPTS)
C     WRITE(*,613)RR(NOPTS)
613   FORMAT(' R=',F10.6,' NEGATIVE OR TOO CLOSE TO ZERO, SKIP RUN')
      GO TO 1
19    WRITE(IOUT,614) RSTART,RJUMP
C     WRITE(*,614) RSTART,RJUMP
614   FORMAT(' RSTART=',F10.6,' .LT. RJUMP=',F6.2,' SKIP RUN')
      GO TO 1

15    STOP
      END


























C
C***
C
      SUBROUTINE CTDFRN(IGO,P,C,RZ,RZDIF,M,LCHAIN,LSTART,ACCY,CUTOFF
     &                 ,F,DFDC,DFDP,IOUT,PT3,ICHK)
C
C
C
C
      IMPLICIT REAL*8(A-H,O-Z)
      LOGICAL*1 TEST,PT3
      DATA SCALE/1.0D-70/
      TEST=.FALSE.
      ICHK=0
      IF (PT3) WRITE(IOUT,601) IGO,P,C,LCHAIN
      IF (PT3) WRITE(*,601) IGO,P,C,LCHAIN
601   FORMAT(' BEGIN CTD FRN; IGO=',I2,'  P;C=',2D20.12,
     &       '  CHAIN AT',I3)
      ACY=ACCY
      MM=M*M
      P2=2*P*P
      JINCR=1
C
C
C
C
      AO=1
      DAODC=0
      DAODP=0
      DADC=1
      GO TO (1,2,3,4),IGO
1     J=M
      RZDIF2=RZDIF*RZDIF
      A=C-MM-M
      DADP=0
      ASSIGN 6 TO JGO
      GO TO 40
2     J=LSTART
      P4=P2*P2/4
      JJ=J*J
      ASAVE=(MM+JJ+J-1.0D0)/(4*(JJ+J)-3)
      A=C-JJ-J-P2*ASAVE
      DADP=-4*P*ASAVE
      JINCR=2
C...  AN INCR OF 2 IS NEEDED FOR HOMONUCLEAR Y(ETA) FUNCTION
      ASSIGN 7 TO JGO
      GO TO 40
3     J=0
      ZK=0.5D0*RZDIF/P
      S1=C-MM-M-2*P*(M+1-ZK)
      S2=-4*P-M-M-1
      DS1=-2*(M+1)
      A=S1
      DADP=DS1
      ASSIGN 8 TO JGO
      GO TO 40
4     J=0
      SIGMA=0.5D0*RZ/P-M-1
      S1=C-RZ-(M+1)*(M+SIGMA-P-P)
      S2=4*P-2*SIGMA
      DSIGMA=-0.5D0*RZ/P**2
      DS1=(M+1)*(2-DSIGMA)
      DS2=4-2*DSIGMA
      A=S1
      DADP=DS1
      ASSIGN 9 TO JGO
      GO TO 40
5     J=J+JINCR
      ICHK=ICHK+1
C
C
      IF(ICHK.EQ.1000) STOP 1000
C
C
      JJ=J*J
      GO TO JGO,(6,7,8,9)
6     ASAVE=(JJ-MM)/(4*JJ-1.0D0)
      AJ=(2*P2*JJ-RZDIF2)*ASAVE
      BJ=C-JJ-J
      DAJ=8*P*JJ*ASAVE
      DBJ=0.0D0
      GO TO 10
7     AJ=-P4*(JJ-J-J+1-MM)*(JJ-MM)/((4*JJ-8*J+3)*(4*JJ-1))
      ASAVE=(MM+JJ+J-1.0D0)/(4*(JJ+J)-3)
      BJ=C-JJ-J-P2*ASAVE
      DAJ=4*AJ/P
      DBJ=-4*P*ASAVE
      GO TO 10
8     ASAVE=-4*J*(J+M)
      DAJ=ASAVE*(J+M)
      AJ=P*ASAVE*(J+M-ZK)
      BJ=-JJ+J*S2+S1
      DBJ=DS1-4*J
      GO TO 10
9     ASAVE=-J*(J+M)
      AJ=ASAVE*(J-1-SIGMA)*(J-1-SIGMA-M)
      BJ=S1+J*S2+2*JJ
      DAJ=ASAVE*(M+2*(1-J+SIGMA))*DSIGMA
      DBJ=DS1+J*DS2
10    IF (TEST) GO TO 12
C
C
      ASAVE=DADC
      DADC=A+BJ*DADC+AJ*DAODC
      DAODC=ASAVE
      ASAVE=DADP
      DADP=BJ*DADP+AJ*DAODP+DBJ*A+DAJ*AO
      DAODP=ASAVE
      ASAVE=A
      A=BJ*A+AJ*AO
      AO=ASAVE
40    IF(J.LT.LCHAIN) GO TO 5
      TEST=.TRUE.
C
C
      A=A/AO
      IF (PT3) WRITE(IOUT,602) A
      IF (PT3) WRITE(*,602) A
602   FORMAT(' VALUE FROM FORWARD CALC =',1PD20.12,/,'  J, A(J)/B(J)')
      DADP=(DADP-A*DAODP)/AO
      DADC=(DADC-A*DAODC)/AO
      AO=1
      DAODC=0
      DAODP=0
      BO=0
      DBODC=0
      DBODP=0
      B=1
      DBDC=0
      DBDP=0
      RATOLD=A
      DIFOLD=1
      GO TO 5
C...  BACKWARD EVALUATION
12    AC=DADC
      DADC=A+BJ*DADC+AJ*DAODC
      BC=DBDC
      DBDC=B+BJ*DBDC+AJ*DBODC
      AP=DADP
      DADP=BJ*DADP+AJ*DAODP+DBJ*A+DAJ*AO
      BP=DBDP
      DBDP=BJ*DBDP+AJ*DBODP+DBJ*B+DAJ*BO
      ASAVE=A
      A=BJ*A+AJ*AO
      BSAVE=B
      B=BJ*B+AJ*BO
      RATNEW=A/B
      IF (PT3) WRITE(IOUT,603) J,RATNEW
      IF (PT3) WRITE(*,603) J,RATNEW
603   FORMAT(1H ,I3,1PD20.12)
      DENOM=DABS(RATNEW)+SCALE
C...  ADDING SCALE (1.0D-70) AVOIDS POSSIBLE DIVISION BY ZERO
      DIFNEW=DABS(RATNEW-RATOLD)/DENOM
      IF(DIFNEW.GT.0.1D0)GO TO 13
C
C
C
C
      IF(DIFNEW+DIFOLD.LE.ACY)GO TO 15
      ACP=CUTOFF/DENOM
      IF(ACP.GT.1.0D-2)ACP=1.0D-4
      IF(ACY.LT.ACP)ACY=ACP
C
C
C
13    DIFOLD=DIFNEW
      RATVO=RATOLD
      RATOLD=RATNEW
      IF(DABS(B).GT.1.0D50)GO TO 14
      AO=ASAVE
      BO=BSAVE
      DAODC=AC
      DAODP=AP
      DBODC=BC
      DBODP=BP
      GO TO 5
C...  B IS GETTING LARGE, RESCALE ALL TERMS TO AVOID EXPONENT OVERFLOWS
14    A=A*SCALE
      B=B*SCALE
      AO=ASAVE*SCALE
      BO=BSAVE*SCALE
      DADC=DADC*SCALE
      DBDC=DBDC*SCALE
      DAODC=AC*SCALE
      DBODC=BC*SCALE
      DADP=DADP*SCALE
      DBDP=DBDP*SCALE
      DAODP=AP*SCALE
      DBODP=BP*SCALE
      GO TO 5
C
C
15    F=RATNEW
      IF(DABS(F-RATOLD).LT.1.0D-12*DABS(F))GO TO 16
C
C
C
      F=RATVO-(RATOLD-RATVO)**2/(F-RATOLD-RATOLD+RATVO)
C
C
C
C
C
C
C
C
C
C
16    DFDC=(DADC-F*DBDC)/B
      DFDP=(DADP-F*DBDP)/B
      RETURN
      END
C
C***
C
      SUBROUTINE CORR(ZA,ZB,N,L,M,NS,K,ICEN)
      REAL*8 ZA,ZB
C...  CORRELATES UA AND SA STATES USING ANALYTIC FORMULAE OF
C...  J. POWER, PHIL.TRANS.ROY.SOC.LOND. 1973 (TO BE PUBLISHED)
C...  ASSUMES THAT ZA.GE.ZB
      IF(ZA.NE.ZB)GO TO 1
C...  ZA=ZB, HOMONUCLEAR OEDM
      ICEN=0
      K=(L-M)/2
      NS=N-L+M+K
      RETURN
C...  HETERONUCLEAR OEDM
1     NU=((1+N)*ZB-ZA*(M+N-1-L))/(ZA+ZB)
      IF(NU.LT.0)NU=0
      NUTEST=(N*ZB-ZA*(M+N-1-L))/(ZA+ZB)
      IF(NU.EQ.0.OR.NUTEST.EQ.NU)GO TO 2
C...  DISSOCIATES WITH THE ELECTRON LOCALIZED ON CENTRE B
      ICEN=2
      K=NU-1
      NS=N-L+M+K
      RETURN
C...  DISSOCIATES WITH THE ELECTRON LOCALIZED ON CENTRE A
2     ICEN=1
      K=L-M-NU
      NS=N-NU
      RETURN
      END
C
C***
C
      SUBROUTINE EXTRAP(X,F,N)
C
C...  GIVEN VALUES OF X FOR I=1,2,...,N AND F FOR I=1,2,...,N-1,
C...  EXTRAPOLATE TO GET AN ESTIMATE OF F FOR I=N.
C
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION X(1),F(1),DELTA(8)
      NM2=N-2
C...  FORM THE DIVIDED DIFFERENCES
      DO 1 I=1,NM2
1     DELTA(I)=(F(I+1)-F(I))/(X(I+1)-X(I))
C
C...  THE FUNCTIONS WE ARE EXTRAPOLATING ARE APPROXIMATELY LINEAR IN X
C...  SO THE DIVIDED DIFFERENCES WILL BE NEARLY CONSTANT. WE FIRST
C...  EXTRAPOLATE TO GET AN ESTIMATE OF THE DIVIDE DIFFERENCE
C...  CORRESPONDING TO I=N.
C
      J=NM2
2     J=J-1
      IF(J.EQ.0)GO TO 4
      DO 3 I=1,J
3     DELTA(I)=DELTA(I+1)-DELTA(I)
      GO TO 2
4     SUM=DELTA(NM2)
      J=NM2
5     J=J-1
      IF(J.EQ.0)GO TO 6
C
C...  EACH SUCCESSIVE TERM SHOULD BE AN ORDER OF MAG SMALLER THAN
C...  THE PREVIOUS TERM. IF NOT, TRUNCATE.
C
      IF(DABS(DELTA(J)).GT.(0.2D0*DABS(DELTA(J+1)))) GO TO 6
      SUM=SUM+DELTA(J)
      GO TO 5
C...  SUM IS THE ESTIMATE FOR DELTA(N-1)
6     F(N)=F(N-1)+(X(N)-X(N-1))*SUM
      RETURN
      END
C
C***
C
      SUBROUTINE CHAIN(FCHAIN,GCHAIN,IGO,RZ,RZDIF,N,L,M,KS,P,C)
      IMPLICIT REAL*8(A-H,O-Z)
C
C...  DETERMINES THE VALUES OF THE CONTINUED FRACTION INDICES AT
C...  WHICH WE CHAIN.
C
      INTEGER FCHAIN,GCHAIN
C
      J=N-L-1
      SIGMA=0.5D0*RZ/P-M-1
      A=2*P*SIGMA+(M+1)*(M+SIGMA)-C
      B=2*(SIGMA-P-P)
1     J=J+1
      ALPHA=(J-1-SIGMA)*(J-1-SIGMA-M)
      BETA=-2*J*J+J*B+A
      IF(DABS(ALPHA).GT.DABS(BETA))GO TO 1
      GCHAIN=J-1
C
      IF(IGO.NE.3)GO TO 3
      J=KS
C...  HETERONUCLEAR LARGE R EXPANSION FOR Y(ETA) -
      A=C-2*P*(M+1)+RZDIF-M*(M+1)
2     J=J+1
      ALPHA=2*P*(J+M)-RZDIF
      BETA=A-4*P*J-J*(J+1+M+M)
      IF(DABS(ALPHA).GT.DABS(BETA))GO TO 2
      FCHAIN=J-1
      RETURN
3     J=L
      IF(IGO.EQ.1)GO TO 5
C...  HOMONUCLEAR EXPANSION FOR Y(ETA) -
4     J=J+2
      ALPHA=P*P*(J-1-M)*(J-M)/((J+J-3)*(J+J-1))
      BETA=C-J*(J+1)-2*P*P*(M*M+J*(J+1)-1)/((J+J+3)*(J+J-1))
      IF(DABS(ALPHA).GT.DABS(BETA))GO TO 4
      FCHAIN=J-2
C...
      RETURN
C...  HETERONUCLEAR SMALL R EXPANSION FOR Y(ETA) -
5     J=J+1
      TEST=J*J
      IF(TEST.LT.C)GO TO 5
      FCHAIN=J-1
      RETURN
      END
C
C***
C
      SUBROUTINE WRLG1(Z,ZP,N,D,M,R,W,W0,W1,W2,W3,W4,W5,W6)
C...  ASYMPTOTIC LARGE R EXPANSION OF W IN POWERS OF 1/R
      IMPLICIT REAL*8(A-H,O-Z)
      INTEGER D,DD
      RATIO=ZP/Z
      NN=N*N
      DD=D*D
      MM=M*M
      W0=-0.5D0*Z*Z/NN
      W1=-ZP
      W2=1.5D0*N*D*RATIO
      W3=-NN*(6*DD+1-NN)*RATIO/(2*Z)
      W4=N*NN*D*(109*DD-39*NN-9*MM+59)*RATIO/16+NN*NN*(3*DD+9*MM-17*NN
     & -19)*RATIO**2/16
      W5=NN*NN*(594*NN*DD-1065*DD*DD-1230*DD+234*MM*DD-9*MM*MM-33*NN*NN
     & +18*MM*(1+NN)-105+138*NN)*RATIO/64+N*NN*NN*D*(111*NN-21*DD-63*MM
     & +189)*RATIO**2/16
      W6=N*NN*NN*D*(2727*DD*DD-2076*NN*DD+5544*DD-1056*DD*MM+93*MM*MM
     & +273*NN*NN-78*NN*MM-450*MM+1533-1470*NN)*RATIO/64+NN*NN*NN*(207*
     & DD*DD-1044*NN*DD-2436*DD+576*MM*DD+42*NN-371+162*MM-42*NN*MM
     & +89*NN*NN-15*MM*MM)*RATIO**2/32+NN*NN*NN*N*D*(69*NN-3*DD+117
     & +33*MM)*RATIO**3/32
      W4=W4/Z**2
      W5=W5/Z**3
      W6=W6/Z**4
      ENTRY WRLG2(R,W)
      T=1/R
      W=W0+T*(W1+T*(W2+T*(W3+T*(W4+T*(W5+T*W6)))))
      RETURN
      END
C
C***
C
      FUNCTION CRLG1(N,L,M,P,RZ)
C...  ASYMPTOTIC LARGE R EXPANSION OF C IN POWERS OF 1/P
      IMPLICIT REAL*8(A-H,O-Z)
      NU=2*(N-L-1)+M+1
      MM=M*M
      NN=NU*NU
      C1=-0.5D0*(NN+1-MM)
      C2=NU*(NN+1-MM)
      C3=MM-1-3*NN
      C4=6*NN*MM-(1-MM)**2-5*NN*NN-10*NN
      C5=NU*(20*(NN+1)-12*MM)
      C6=8*(MM-1)-24*NN
      C7=NU*(NN*(33*NN+114-46*MM)+37+MM*(13*MM-50))
      C8=NN*(138*MM-342-165*NN)-37+MM*(50-13*MM)
      C9=NU*(284*NN+292-156*MM)
      C10=NN*(MM*(230-39*MM+100*NN)-239-NN*(340+63*NN))-14+MM*(30-MM*
     & (18-2*MM))
      C11=NU*(NN*(1360+378*NN-400*MM)+478+MM*(78*MM-460))
      C12=NN*(630*MM-1810-845*NN)-209+MM*(250-41*MM)
      C13=NU*(860*NN+900-460*MM)
      C14=NU*(NN*(5221+MM*(465*MM-939*NN-3750)+NN*(4139+527*NN))+1009
     & -MM*(1591-MM*(635-53*MM)))
      C15=NN*(MM*(11250-1395*MM+4695*NN)-15663-NN*(20695+NN*3689))-1009
     & +MM*(1591-MM*(635-53*MM))
      C16=NU*(14072+NN*(37640-9520*MM+10128*NN)-MM*(11640-1440*MM))
      C17=NN*(9780*MM-30140-13750*NN)-3630+MM*(4140-510*MM)
      C18=NU*(9520*NN+10080-5040*MM)
      ENTRY CRLG2(P,RZ)
      S=RZ/(2*P)
      CRLG1=2*P*(S-NU)+NU*S+C1+(C2+S*(C3+2*NU*S))/(8*P)+(C4+S*(C5+S*(C6+
     & 8*NU*S)))/(64*P*P)+(C7+S*(C8+S*(C9+S*(8*C6+40*NU*S))))/(512*P**3)
     & +(C10+S*(C11+S*(C12+S*(C13+S*(16*C6+56*NU*S)))))/(1024*P**4)+(C14
     & +S*(C15+S*(C16+S*(C17+S*(C18+S*(128*C6+336*NU*S))))))/(8192*P**5)
      RETURN
      END
C
C***
C
      SUBROUTINE WFNC
C
C...  THIS SUBROUTINE CALCULATES THE WAVEFUNCTION COEFFICIENTS./KJ/.
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/BLK1/ PP(999),CSEP(999),RR(999),ICVGY(999),ICVGX(999)
      COMMON/WF/ ZA,ZB,N,L,M
      COMMON/BLK2/ IETOT,NOPTS,IWFN,RJUMP,SIGN,RSTART
      DIMENSION X(100),Y(100),WF(100,100),ISTART(5),IEND(5),IINCR(5)
      DIMENSION IX(400),CX(400),IY(200),CY(200),IY1(200),CY1(200)
      DIMENSION ALPHA(400),BETA(400),GAMMA(400)
C
C...  MAX # OF TERMS: 20 IN Y-EXPANSION AND 40 IN X-EXPANSION.
C...  IGO=2  HOMONUCLEAR EXPANSION OF Y (INNER SOLUTION).
C...  IGO=4  EXPANSION OF X (OUTER SOLUTION).
C...  IGO=1  HETERONUCLEAR SMALL R EXPANSION OF Y FOR POSITIVE ETA.
C...  IGO=5  HETERONUCLEAR SMALL R EXPANSION OF Y FOR NEGATIVE ETA.
C...  IGO=3  HETERONUCLEAR LARGE R EXPANSION OF Y.
C
601   FORMAT(/,5X,' IGO   J       COEFF          AT R=',F8.3,/)
602   FORMAT(5X,I3,I5,D15.5)
C
      DO 10 IGO=1,5
      GO TO(1,2,3,4,1)IGO
1     ISTART(IGO)=M
      IEND(IGO)=20
      IINCR(IGO)=1
      GO TO 10
2     ISTART(IGO)=M
      IF ((L-M).NE.2*((L-M)/2)) ISTART(IGO)=M+1
      IEND(IGO)=2*20
      IINCR(IGO)=2
      GO TO 10
3     ISTART(IGO)=0
      IEND(IGO)=20
      IINCR(IGO)=1
      GO TO 10
4     ISTART(IGO)=0
      IEND(IGO)=40
      IINCR(IGO)=1
10    CONTINUE
C
C...  START R-LOOP
C
      IRS=2
      IF(RSTART.NE.0.0)IRS=1
C
      DO 999 I=IRS,NOPTS
      R=RR(I)
      ICY=ICVGY(I)
      ICX=ICVGX(I)
      IGO=1
      IF(ZA.EQ.ZB)IGO=2
      IF(IGO.EQ.1.AND.R.GE.RJUMP)IGO=3
      P=DSQRT(-0.5D00*PP(I))*R
      IF(IETOT.NE.0)P=DSQRT(-0.5D00*(PP(I)-ZA*ZB/R))*R
      C=CSEP(I)
C
C...  COEFFICIENTS OF THE Y-EXPANSION(INNER SOLUTION).
C
15    JSTART=ISTART(IGO)+1
      JEND=IEND(IGO)+1
      JINCR=IINCR(IGO)
      JCOUNT=0
C
      DO 50 JJ=JSTART,JEND,JINCR
      J=JJ-1
      JCOUNT=JCOUNT+1
      IF(JCOUNT.GT.ICY)GO TO 51
C
      CALL RECUR(IGO,J,R,P,C,ALP,BET,GAM)
C
      ALPHA(JCOUNT)=ALP
      BETA(JCOUNT)=BET
      GAMMA(JCOUNT)=GAM
C
      IF(JCOUNT.NE.1)GO TO 20
      WRITE(3,601)R
CK      WRITE(*,601)R
      CY(JCOUNT)=1.0D00
      IY(JCOUNT)=J
      GO TO 40
20    IF(JCOUNT.NE.2)GO TO 30
      CY(JCOUNT)=-BETA(JCOUNT-1)/GAMMA(JCOUNT-1)
      IY(JCOUNT)=J
      GO TO 40
30    CY(JCOUNT)=-ALPHA(JCOUNT-1)*CY(JCOUNT-2)/GAMMA(JCOUNT-1)
     &            -BETA(JCOUNT-1)*CY(JCOUNT-1)/GAMMA(JCOUNT-1)
      IY(JCOUNT)=J
40    CONTINUE
C
C...  PRINT OUT COEFFICIENTS.
C
      WRITE(3,602)IGO,IY(JCOUNT),CY(JCOUNT)
CK      WRITE(*,602)IGO,IY(JCOUNT),CY(JCOUNT)
C
C...  IF IGO=1 SAVE COEFFICIENTS(FOR POSITIVE ETA).
C
      IF(IGO.NE.1)GO TO 50
      IY1(JCOUNT)=IY(JCOUNT)
      CY1(JCOUNT)=CY(JCOUNT)
50    CONTINUE
51    CONTINUE
C
C...  IF IGO=1 RECALCULATE COEFFICIENTS WITH IGO=5(FOR NEGATIVE ETA).
C
      IF(IGO.NE.1)GO TO 60
      IGO=5
      GO TO 15
60    CONTINUE
C
C...  COEFFICIENTS OF THE X-EXPANSION(OUTER SOLUTION).
C
      IGO=4
      JSTART=ISTART(IGO)+1
      JEND=IEND(IGO)+1
      JINCR=IINCR(IGO)
      JCOUNT=0
C
      DO 90 JJ=JSTART,JEND,JINCR
      J=JJ-1
      JCOUNT=JCOUNT+1
      IF(JCOUNT.GT.ICX)GO TO 100
C
      CALL RECUR(IGO,J,R,P,C,ALP,BET,GAM)
C
      ALPHA(JCOUNT)=ALP
      BETA(JCOUNT)=BET
      GAMMA(JCOUNT)=GAM
C
      IF(JCOUNT.NE.1)GO TO 70
      WRITE(3,601)R
CK      WRITE(*,601)R
      CX(JCOUNT)=1.0D00
      IX(JCOUNT)=J
      GO TO 80
70    IF(JCOUNT.NE.2)GO TO 75
      CX(JCOUNT)=-BETA(JCOUNT-1)/GAMMA(JCOUNT-1)
      IX(JCOUNT)=J
      GO TO 80
75    CX(JCOUNT)=-ALPHA(JCOUNT-1)*CX(JCOUNT-2)/GAMMA(JCOUNT-1)
     &            -BETA(JCOUNT-1)*CX(JCOUNT-1)/GAMMA(JCOUNT-1)
      IX(JCOUNT)=J
80    CONTINUE
C
C...  PRINT OUT COEFFICIENTS.
C
      WRITE(3,602)IGO,IX(JCOUNT),CX(JCOUNT)
CK      WRITE(*,602)IGO,IX(JCOUNT),CX(JCOUNT)
90    CONTINUE
100   CONTINUE
999   CONTINUE
C
      RETURN
      END
C
C***
C
      SUBROUTINE RECUR(IGO,J,R,P,C,ALPHA,BETA,GAMMA)
C
C...  THIS SUBROUTINE CALCULATES THE RECURRENCE COEFFICIENTS./KJ/.
C
      IMPLICIT REAL*8(A-H,O-Z)
      COMMON/WF/ ZA,ZB,N,L,M
      COMMON/BLK2/ IETOT,NOPTS,IWFN,RJUMP,SIGN,RSTART
      
C
      SIGMAE= 0.5*R*(ZA-ZB)/P - (M+1)
      SIGMAZ= 0.5*R*(ZA+ZB)/P - (M+1)
C
      GO TO(1,2,3,4,5)IGO
C
C...  HETERONUCLEAR SMALL R EXPANSION OF Y(ETA) FOR POSITIVE ETA.
1     ALPHA=-2.0*P*(J-M)*(J-M-1-SIGMAE)/(2*J-1)
      BETA = J*(J+1)-C
      GAMMA= 2.0*P*(J+M+2+SIGMAE)*(J+M+1)/(2*J+3)
      RETURN
C
C...  HETERONUCLEAR SMALL R EXPANSION OF Y(ETA) FOR NEGATIVE ETA.
5     ALPHA=-2.0*P*(J-M)*(J+M+1+SIGMAE)/(2*J-1)
      BETA =-J*(J+1)+C
      GAMMA= 2.0*P*(J-M-SIGMAE)*(J+M+1)/(2*J+3)
      RETURN
C
C...  HETERONUCLEAR LARGE R EXPANSION OF Y(ETA).
C
3     IF(SIGN.LT.0.0)GO TO 6
C...  FOR CENTRE A SEPARATED ATOM STATE. SIGN=+1
      ALPHA=-2.0*P*(SIGMAE+1-J)
      BETA =-J*(J+2*M+1+4.0*P)+2.0*P*SIGMAE-M*(M+1)+C
      GAMMA= 2.0*(J+1)*(J+M+1)
      RETURN
C...  FOR CENTRE B SEPARATED ATOM STATE. SIGN=-1
6     ALPHA= 2.0*P*(SIGMAE+2*M+1+J)
      BETA =-J*(J+2*M+1+4.0*P)-2.0*P*(SIGMAE+2*M+2)-M*(M+1)+C
      GAMMA= 2.0*(J+1)*(J+M+1)
      RETURN
C
C...  HOMONUCLEAR EXPANSION OF Y(ETA).
2     ALPHA= P*P*(J-M)*(J-M-1.0)/((2*J-3.0)*(2*J-1.0))
      BETA =-2.0*P*P*(J*(J+1)+M*M-1)/((2*J+3.0)*(2*J-1))-(J*(J+1)-C)
      GAMMA= P*P*(J+M+2.0)*(J+M+1.0)/((2.0*J+5.0)*(2.0*J+3.0))
      RETURN
C
C...  EXPANSION OF X(OUTER SOLUTION).
4     ALPHA= (J-1.0-SIGMAZ)*(J-1.0-SIGMAZ-M)
      BETA = (M+1.0)*(M+SIGMAZ)-2.0*J*(2.0*P-SIGMAZ+J)+2.0*P*SIGMAZ-C
      GAMMA= (J+1.0)*(J+M+1.0)

      RETURN
      END


      SUBROUTINE GRAVE
C
C             CALCULATION OF OEDM WAVE-FUNCTIONS
C
      DOUBLE PRECISION A,AG,AOUT,AP,CEM,DABS,DFLOAT,E,EM,P,PE,PE2,QU,
     1R,RR,RQU,SIGMA,XF,XG,XF1,switch
      INTEGER ME,N,L,IVER,NG,NF,MYINDEX,I
      INTEGER JWRIT,JPERF,NGMAX,NFMAX,NGIN,NFIN,NSTATE,XGMAX,XFMAX
      LOGICAL NGTEST,NFTEST
      DIMENSION RR(999),P(999),AP(999)
C

      DIMENSION AOUT(88)
      EQUIVALENCE (QU,AOUT)
      DATA JAOUT/176/
C
C        THE COMMON TRAP IS USED TO TRANSFER THE QUANTITIES DEFINING THE
C     WAVE FUNCTION TO SUBROUTINE INDEX.
C
      COMMON/TRAP/QU,R,ME,N,L,IVER,E,PE,A,NG,NF,XG(40),XF(40)
      COMMON/INIT/SIGMA,EM,CEM,PE2,RQU,ME2,MEC
C
C        IVER MAY BE USED FREELY TO LABEL DIFFERENT CALCULATIONS OF THE
C     WAVE FUNCTION. IT IS USED ONLY IN THE OUTPUT THROUGH SUBROUTINE
C     INDEX.
C
      DATA IVER/2/
C
C        IN AND IOEDM DEFINE THE INPUT DEVICES.
C
c      DATA INN,IOEDM/5,5/
1     FORMAT(I3/I3/E12.6/E12.6/I3/I3/I3/I3/I3)
    2 FORMAT(36X,6HXGMAX=,D15.6,10X,6HXFMAX=,D15.6)
    3 FORMAT(E12.6,4I3/(3E20.14))
    4 FORMAT(7H FOR R=,F13.10,11H MORE THAN ,I2,32H POINTS REQUIRED FOR
     1G EXPANSION)
    5 FORMAT(7H FOR R=,F13.10,11H MORE THAN ,I2,32H POINTS REQUIRED FOR
     1F EXPANSION)
    6 FORMAT(4H R= ,F13.10,3X,5H NF= ,I3,3X,5H NG= ,I3)
    8 FORMAT(1H1,20X,16HSTATE CONSIDERED,3I5,30X,24HRATIO OF NUCLEAR CHA
     1RGES,2X,F9.6,/,21X,16(1H*),45X,24(1H*))
    9 FORMAT(40X,21(1H*),13X,21(1H*),/,40X,1H*,2HR=,E17.10,1H*,13X,3H*E=
     1,E17.10,1H*,/,40X,21(1H*),13X,21(1H*),/   ,27X,3HPE=,E17.10,10X,3H
     2AF=,E17.10,10X,3HAG=,E17.10)
  203 FORMAT(       1X,19HEIGENVECTOR OF G   ,/ ,(1X,5E20.10))
  204 FORMAT(       1X,19HEIGENVECTOR OF F   ,/ ,(1X,5E20.10))
C
C        SIGNIFICATION OF THE DATA READ ON UNIT IN:
C
C        JWRIT: THE COEFFICIENTS OF THE SEMI-ANALYTIC EXPANSIONS OF THE
C     WAVE-FUNCTION ARE PRINTED IF JWRIT IS NON-ZERO.
C        JPERF: THE RESULTS ARE TRANSFERRED TO SUBROUTINE INDEX IF JPERFACXX0073
C     IS NON-ZERO.
C        XGMAX: THE TRUNCATION OF THE SEMI-ANALYTIC EXPANSION OF THE OUTACXX0075
C     ER WAVE-FUNCTION IS SUCH THAT THE RATIO OF THE FIRST COEFFICIENT
C     TO THE LAST IN THE EXPANSION IS GREATER THAN XGMAX.
C        XFMAX: SAME AS XFMAX FOR THE INNER WAVE-FUNCTION.
C        NGMAX: MAXIMUM NUMBER OF TERMS IN THE EXPANSION OF THE OUTER WAACXX0079
C     VE-FUNCTION.
C        NFMAX: SAME AS NGMAX FOR INNER WAVE-FUNCTION.
C        NGIN: INITIAL GUESS FOR THE NUMBER OF TERMS IN THE EXPANSION OFACXX0082
C      THE OUTER WAVE-FUNCTION.
C        NFIN: SAME AS NFIN FOR INNER WAVER-FUNCTION.
C        NSTATE: NUMBER OF STATES FOR WHICH THE CALCULATIONS ARE TO BE PACXX0085
C     ERFORMED.
C

      JWRIT = 1
      JPERF = 0
      XGMAX = 10000
      XFMAX = 10000
      NGMAX = 80
      NFMAX = 80
      NGIN = 7
      NFIN = 8
      NSTATE = 1


C               LOOP ON STATES.
C
      DO 100 K=1,1
      NG=NGIN
      NF=NFIN

      OPEN(69,FILE='IOEDM')
      READ(69,33) QU,N,L,ME,NR
      READ(69,2330) (RR(I),P(I),AP(I),I=1,300)

2330  FORMAT(3E20.6)
33    FORMAT(D12.6,3I3,I5)
      MYINDEX = 100*N+10*L+ME
      EM=DFLOAT(ME)
      ASSIGN 22 TO JPAR
      NFPMAX=NFMAX
      IF(DABS(QU-1.D0).GE.(2.D-6)) GO TO 101
      QU=1.D0
      NPAR=0
      ASSIGN 220 TO JPAR
      IF((-1.)**(L+ME).LT.0.) NPAR=1
      NCPAR=1-NPAR
      NFPMAX=2*((NFMAX+NCPAR)/2)-NCPAR
  101 CONTINUE
      WRITE(6,8) N,L,ME,QU

      ME2=ME+ME
      MEC=2*ME*ME+1
C
C               LOOP ON INTERNUCLEAR DISTANCES.
C
      DO 200 IR=1,NR
      R=RR(IR)
      PE=P(IR)
      A=AP(IR)
      RQU=R*(QU-1.D0)
      PE2=PE*PE
      AG=-A
      E=-2.D0*PE*PE/(R*R)
      NGTEST=.TRUE.
      NFTEST=.TRUE.
      SIGMA=R*(1.D0+QU)/(2.D0*PE)-1.D0-EM
      CEM=EM*(EM+SIGMA+1.D0)+SIGMA*(1.D0+2.D0*PE)-PE2
      CALL DGE(NG,AG,PE,XG)
      GO TO JPAR,(22,220)
   22 CALL DFE(NF,A,PE,XF)
      GO TO 20
  220 IF(NF.LT.4) NF=4
      NFF=(NF+NCPAR)/2
      NF=2*NFF-NCPAR
      CALL DFSYM(NFF,A,PE,XF,NPAR)
   20 CONTINUE
C
C              CHECK IF ENOUGH TERMS IN SERIES TO ACHIEVE REQUIRED PRECIACXX0157
C     SION.
C
      IF(DABS(XG(1)).GT.XGMAX) GO TO 11
      NGTEST=.FALSE.
      IF(NG.LT.NGMAX) GO TO 19
      WRITE(6,4) R,NGMAX
      GO TO 11
   19 CONTINUE
      XF1=XF(1)
      IF(DABS(XF1).LT.1.D-10) XF1=XF(2)
      IF(DABS(XF1).GT.XFMAX) GO TO 12
      NFTEST=.FALSE.
      IF(NF.LT.NFPMAX) GO TO 16
      WRITE(6,5) R,NFPMAX
      GO TO 12
   11 CONTINUE
      XF1=XF(1)
      IF(DABS(XF1).LT.1.D-10) XF1=XF(2)
      IF(DABS(XF1).GT.XFMAX) GO TO 13
      NFTEST=.FALSE.
      IF(NF.LT.NFPMAX) GO TO 17
      WRITE(6,5) R,NFPMAX
      GO TO 13
   12 NG=NG+2
      IF(NG.GT.NGMAX) NG=NGMAX
      CALL DGE(NG,AG,PE,XG)
      GO TO 20
   16 NG=NG+2
      IF(NG.GT.NGMAX) NG=NGMAX
      NF=NF+2
      IF(NF.GT.NFPMAX) NF=NFPMAX
      CALL DGE(NG,AG,PE,XG)
      GO TO JPAR,(22,220)
   17 NF=NF+2
      IF(NF.GT.NFPMAX) NF=NFPMAX
      GO TO JPAR,(22,220)
   13 CONTINUE
C
C     EDITION OF RESULTS.
C
      IF(JWRIT.EQ.0) WRITE(6,6) R,NF,NG
      IF(JWRIT.EQ.0) GO TO 21
      WRITE(MYINDEX,99) E,PE,A,NG,NF
      WRITE(MYINDEX,998) (XG(I),I=1,NG)
      WRITE(MYINDEX,998) (XF(I),I=1,NF)

99    FORMAT(3E12.4,2I3)
998   FORMAT((30E15.6))

   21 CONTINUE
      IF(NGTEST.AND.NG.NE.2) NG=NG-1
      IF(NFTEST.AND.NF.NE.2) NF=NF-1
  200 CONTINUE
  100 CONTINUE
      RETURN
      END
      SUBROUTINE DGE(N,AG,PE,BG)
C
C          THE SUBROUTINE DGE CALCULATES THE TRIDIAGONAL MATRIX G AND SOACXX0213
C     LVES THE SYSTEM OF LINEAR EQUATIONS WHICH GIVES THE COEFFICIENT OFACXX0214
C      THE EXPANSION OF THE OUTER WAVE-FUNCTION.
C
      DOUBLE PRECISION A,AA,AG,AM,BG,CEM,DFLOAT,D1,EM,HI,MACH,PE,SIGMA,
     1ZERO
      COMMON/INIT/SIGMA,EM,CEM
      COMMON/MAT/A(200),AM(200),INT(40)
      DIMENSION BG(1)
      DATA ZERO/0.D0/
C***********************************************************************
C     MACH IS A MACHINE DEPENDENT QUANTITY ( SEE COMMENTS IN BANDET).
C***********************************************************************
      DATA MACH/2.3D-16/
C
      LOGICAL FAIL
      NN=N-1
      J=0
      DO 20 I=1,NN
      J=J+1
      AA=DFLOAT(I-1)-SIGMA
   20 A(J)=AA*(AA-EM)
      AA=SIGMA-2.D0*PE
      IF(NN.EQ.1) GO TO 21
      KS=NN-1
      DO 30 I=1,KS
      J=J+1
      HI=DFLOAT(I)
   30 A(J)=2.D0*HI*(AA-HI)+CEM-AG
      J=J+1
      A(J)=0.D0
      IF(NN.EQ.2) GO TO31
      KS=NN-2
      DO 40 I=1,KS
      J=J+1
      HI=DFLOAT(I+1)
   40 A(J)=HI*(HI+EM)
      J=J+1
      A(J)=0.D0
      J=J+1
      A(J)=0.D0
      M2=2
   32 CALL BANDET(NN,0,M2,0,ZERO,MACH,A,D1,ID2,AM,INT,FAIL)
      IF(FAIL) GO TO 99
      IF(NN.EQ.2) GO TO 51
      NS=NN-2
      DO 50 I=1,NS
   50 BG(I)=0.D0
   51 NS=NN-1
      HI=DFLOAT(NS+1)
      BG(NS)=-HI*(HI+EM)
      HI=DFLOAT(NN)
      BG(NN)=-2.D0*HI*(AA-HI)-CEM+AG
      CALL BANSOL(NN,0,M2,0,1,A,AM,INT,BG)
      BG(N)=1.D0
      RETURN
   31 M2=1
      GO TO 32
   21 A(2)=2.D0*(AA-1.D0)+CEM-AG
      BG(1)=-A(2)/A(1)
      BG(2)=1.D0
      RETURN
   99 STOP 111
      END
      SUBROUTINE DFE(N,AF,PE,BF)
C
C          THE SUBROUTINE DFE CALCULATES THE PENTADIAGONAL MATRIX F AND
C     SOLVES THE SYSTEM OF LINEAR EQUATIONS WHICH GIVES THE COEFFICIENT
C     OF THE EXPANSION OF THE INNER WAVE-FUNCTION.
C          FOR ASYMETRICAL SYSTEMS ONLY ( QU.NE.1.).
C
      DOUBLE PRECISION A,AF,AM,BF,DFLOAT,D1,MACH,PE,PE2,QU,R,RQU,SIG,
     1ZERO
      COMMON/INIT/SIG(3),PE2,RQU,ME2,MEC
      COMMON/TRAP/QU,R,ME
      COMMON/MAT/A(200),AM(200),INT(40)
      DIMENSION BF(1)
      DATA ZERO/0.D0/
C***********************************************************************
C     MACH IS A MACHINE DEPENDENT QUANTITY ( SEE COMMENTS IN BANDET).
C***********************************************************************
      DATA MACH/2.3D-16/
C
      LOGICAL FAIL
      NN=N-1
      IF(NN.EQ.1) GO TO 11
      J=1
      A(1)=0.D0
      DO 10 I=2,NN
      J=J+1
      I2=I+I+ME2-1
   10 A(J)=PE2*DFLOAT(I*(I-1))/DFLOAT(I2*(I2-2))
      DO 20 I=1,NN
      J=J+1
   20 A(J)=RQU*DFLOAT(I)/DFLOAT(ME2+I+I-1)
      KS=NN-1
      DO 30 I=1,KS
      J=J+1
      IME=I+ME
      JJ=IME*(IME+1)
      JNU=JJ+JJ-MEC
      I2=I+I+ME2-1
      JDEN=I2*(I2+4)
   30 A(J)=-DFLOAT(JJ)+PE2*DFLOAT(JNU)/DFLOAT(JDEN)-AF
      J=J+1
      A(J)=0.D0
      IF(NN.EQ.2) GO TO 31
      KS=NN-2
      DO 40 I=1,KS
      J=J+1
      JNU=ME2+I+1
   40 A(J)=RQU*DFLOAT(JNU)/DFLOAT(JNU+I+2)
      J=J+1
      A(J)=0.D0
      J=J+1
      A(J)=0.D0
      IF(NN.EQ.3) GO TO 41
      KS=NN-3
      DO 50 I=1,KS
      J=J+1
      JNU=ME2+I+1
      JDEN=JNU+I+2
   50 A(J)=PE2*DFLOAT(JNU*(JNU+1))/DFLOAT(JDEN*(JDEN+2))
      J=J+1
      A(J)=0.D0
      J=J+1
      A(J)=0.D0
      J=J+1
      A(J)=0.D0
      M2=3
      NS=NN-3
      DO 60 I=1,NS
   60 BF(I)=0.D0
   42 NS=NN-2
      JNU=ME2+NS+1
      JDEN=JNU+NS+2
      BF(NS)=-PE2*DFLOAT(JNU*(JNU+1))/DFLOAT(JDEN*(JDEN+2))
   32 NS=NN-1
      JNU=ME2+NS+1
      BF(NS)=-RQU*DFLOAT(JNU)/DFLOAT(JNU+NS+2)
      IME=NN+ME
      JJ=IME*(IME+1)
      I2=ME2+NN+NN-1
      JNU=JJ+JJ-MEC
      JDEN=(I2+4)*I2
      BF(NN)=DFLOAT(JJ)-PE2*DFLOAT(JNU)/DFLOAT(JDEN)+AF
      CALL BANDET(NN,1,M2,0,ZERO,MACH,A,D1,ID2,AM,INT,FAIL)
      IF(FAIL) GO TO 99
      CALL BANSOL(NN,1,M2,0,1,A,AM,INT,BF)
      BF(N)=1.D0
      RETURN
   99 STOP 222
   41 M2=2
      GO TO 42
   31 M2=1
      GO TO 32
   11 A(1) =RQU/DFLOAT(ME2+1)
      JJ=(ME+1)*(ME+2)
      JNU=JJ+JJ-MEC
      JDEN=(ME2+5)*(ME2+1)
      A(2)=-DFLOAT(JJ)+PE2*DFLOAT(JNU)/DFLOAT(JDEN)-AF
      BF(1)=-A(2)/A(1)
      BF(2)=1.D0
      RETURN
      END
      SUBROUTINE DFSYM(N,AF,PE,BF,NPAR)
C
C          THE SUBROUTINE DFSYM CALCULATES THE TRIDIAGONAL MATRIX F AND
C     SOLVES THE SYSTEM OF LINEAR EQUATIONS WHICH GIVES THE COEFFICIENT
C     OF THE EXPANSION OF THE INNER WAVE-FUNCTION.
C         FOR SYMETRICAL SYSTEMS ONLY ( QU = 1. ).
C
      DOUBLE PRECISION A,AF,AM,BF,DFLOAT,D1,MACH,PE,PE2,QU,R,RQU,SIG,
     1ZERO
      COMMON/INIT/SIG(3),PE2,RQU,ME2,MEC
      COMMON/TRAP/QU,R,ME
      COMMON/MAT/A(200),AM(200),INT(40)
      DIMENSION BF(1)
      DATA ZERO/0.D0/
C***********************************************************************
C     MACH IS A MACHINE DEPENDENT QUANTITY ( SEE COMMENTS IN BANDET).
C***********************************************************************
      DATA MACH/2.3D-16/
C
      LOGICAL FAIL
      NN=N-1
      IF(NN.EQ.1) GO TO 11
      J=0
      DO 10 II=1,NN
      I=2*II+NPAR
      J=J+1
      I2=I+I+ME2-1
   10 A(J)=PE2*DFLOAT(I*(I-1))/DFLOAT(I2*(I2-2))
      KS=NN-1
      DO 30 II=1,KS
      J=J+1
      I=2*II+NPAR
      IME=I+ME
      JJ=IME*(IME+1)
      JNU=JJ+JJ-MEC
      I2=I+I+ME2-1
      JDEN=I2*(I2+4)
   30 A(J)=-DFLOAT(JJ)+PE2*DFLOAT(JNU)/DFLOAT(JDEN)-AF
      J=J+1
      A(J)=0.D0
      IF(NN.EQ.2) GO TO 31
      KS=NN-2
      DO 50 II=1,KS
      I=2*II+NPAR
      J=J+1
      JNU=ME2+I+1
      JDEN=JNU+I+2
   50 A(J)=PE2*DFLOAT(JNU*(JNU+1))/DFLOAT(JDEN*(JDEN+2))
      J=J+1
      A(J)=0.D0
      J=J+1
      A(J)=0.D0
      M2=2
   32 CALL BANDET(NN,0,M2,0,ZERO,MACH,A,D1,ID2,AM,INT,FAIL)
      IF(FAIL) GO TO 99
      IF(NN.EQ.2) GO TO 51
      KS=NN-2
      DO 40 I=1,KS
   40 BF(I)=0.D0
   51 KS=NN-1
      I=2*KS+NPAR
      JNU=ME2+I+1
      JDEN=JNU+I+2
      BF(KS)=PE2*DFLOAT(JNU*(JNU+1))/DFLOAT(JDEN*(JDEN+2))
      KS=NN
      I=KS+KS+NPAR
      IME=I+ME
      JJ=IME*(IME+1)
      JNU=JJ+JJ-MEC
      I2=I+I+ME2-1
      JDEN=I2*(I2+4)
      BF(KS)=-DFLOAT(JJ)+PE2*DFLOAT(JNU)/DFLOAT(JDEN)-AF
      CALL BANSOL(NN,0,M2,0,1,A,AM,INT,BF)
   12 BF(N)=1.D0
      DO 20 I=2,N
      II=N-I+2
      KS=II+II+NPAR-1
      BF(KS)=BF(II)
      KS=KS-1
   20 BF(KS)=0.D0
      BF(NPAR+1)=BF(1)
      IF(NPAR.EQ.1) BF(1)=0.D0
      RETURN
   31 M2=1
      GO TO 32
   99 STOP 333
   11 I=2+NPAR
      I2=I+I+ME2-1
      A(1)=PE2*DFLOAT(I*(I-1))/DFLOAT(I2*(I2-2))
      IME=I+ME
      JJ=IME*(IME+1)
      JNU=JJ+JJ-MEC
      JDEN=I2*(I2+4)
      A(2)=-DFLOAT(JJ)+PE2*DFLOAT(JNU)/DFLOAT(JDEN)-AF
      BF(1)=-A(2)/A(1)
      GO TO 12
      END
      SUBROUTINE BANSOL(N,M1,M2,IE,IR,A,M,INT,B)
C
C        FORTRAN TRANSLATION OF THE ALGOL PROGRAM BANSOL1
C        ( HANDBOOK FOR AUTOMATIC COMPUTATION, VOL. II, I/6)
C        SOLVES THE IR SYSTEMS OF N LINEAR EQUATIONS:
C                  AX = B
C     WHERE A IS A BAND MATRIX OF M1 SUBDIAGONAL AND M2 SUPERDIAGONAL
C     LINES.
C
C         THE MATRIX A SHOULD BE OF THE FORM DESCRIBED IN THE REFERENCE
C     AND IS OF DIMENSION N*(M1+M2+1). B IS A MATRIX CONTAINING THE IR
C     RIGHT-HAND SIDES. THE SOLUTIONS X ARE OVERWRITTEN ON B. M IS A WORACXX0489
C     KING ARRAY (REAL) OF DIMENSION N*(M1+M2+1) AND INT AN INTEGER
C     ARRAY OF DIMENSION N.
C        CALL BANSOL SHOULD BE PRECEDED BY CALL BANDET. THE VALUE OF IE
C     SHOULD BE THE SAME AS THAT GIVEN IN CALL BANDET.
C        THE PROGRAM IS IN DOUBLE PRECISION.
C
      DOUBLE PRECISION A,B,M,X
      DIMENSION A(N,1),M(N,1),B(N,1),INT(1)
      INTEGER W
      L=M1
      IF(IE.NE.0) GO TO 9
      DO 10 K=1,N
      I=INT(K)                                                         
      IF(I.EQ.K) GO TO 11
      DO 20 J=1,IR
      X=B(K,J)
      B(K,J)=B(I,J)
      B(I,J)=X
   20 CONTINUE
   11 CONTINUE
      IF(L.LT.N) L=L+1
      I=K+1
   30 IF(I.GT.L) GO TO 31
      IK=I-K
      X=M(K,IK)
      DO 40 J=1,IR
      B(I,J)=B(I,J)-X*B(K,J)
   40 CONTINUE
      I=I+1
      GO TO 30
   31 CONTINUE
   10 CONTINUE
    9 CONTINUE
      DO 50 J=1,IR
      L=-M1
      DO 60 II=1,N
      I=N-II+1
      X=B(I,J)
      W=I+M1
      K=1-M1
   62 IF(K.GT.L) GO TO 61
      IK=K+M1+1
      KK=K+W
      X=X-A(I,IK)*B(KK,J)
      K=K+1
      GO TO 62
   61 B(I,J)=X/A(I,1)
      IF(L.LT.M2) L=L+1
   60 CONTINUE
   50 CONTINUE
      RETURN
      END
      SUBROUTINE BANDET(N,M1,M2,IE,LAM,MAC,A,D1,ID2,M,INT,FAIL)
C
C        FORTRAN TRANSLATION OF THE ALGOL PROGRAM BANDET1
C        (HANDBOOK FOR AUTOMATIC COMPUTATION, VOL II, I/6)
C        BANDET CALCULATES THE DETERMINAMT OF A BAND MATRIX AND/OR PUTS
C     THE MATRIX IN A FORM SUITABLE FOR USE BY BANSOL.
C
C        N=DIMENSION OF THE MATRIX
C        M1=NUMBER OF SUBDIAGONAL LINES.
C        M2=NUMBER OF SUPERDIAGONAL LINES.
C        IE=  1 IF THE DETERMINANT IS REQUIRED AND 0 OTHERWISE (FOR MORE
C     DETAILS ON THIS QUANTITY SEE EXPLANATIONS ON E IN THE REFERENCE).
C        LAM=CALCULATIONS ARE PERFORMED ON A-LAM*I AND NOT ON A.
C        MAC=SMALLEST NUMBER SUCH THAT 1.D0+MAC.NE.1.D0
C     (MAC=2.3D-16 ON THE IRIS 80).
C        A=MATRIX OF DIMENSION N*(M1+M2+1). SHOULD BE OF THE FORM
C     DESCRIBED IN THE REFERENCE.
C        D1,ID2=GIVE THE VALUE OF THE DETERMINANT AS D1*2.D0**ID2.
C        M=REAL WORKING MATRIX OF DIMENSION N*(M1+M2+1)
C        INT=WORKING ARRAY OF DIMENSION N.
C        FAIL=LOGICAL. IF BANSOL FAILS, THEN FAIL=.TRUE.
C        THE PROGRAM IS IN DOUBLE PRECISION.
C
      DOUBLE PRECISION A,DABS,LAM,X,D1,M(N,1),MAC,NORM
      DIMENSION A(N,1),INT(1)
      LOGICAL FAIL
      FAIL=.FALSE.
      MSUP=M1+M2+1
      NORM=0.D0
      IF(IE.NE.1) GO TO 11
      DO 10 I=1,N
      X=0.D0
      DO 20 J=1,MSUP
   20 X=X+DABS(A(I,J))
      IF(NORM.LT.X) NORM=X
   10 CONTINUE
   11 M0=M1+1
      DO 30 I=1,N
   30 A(I,M0)=A(I,M0)-LAM
      L=M1
      I=1
   42 IF(I.GT.M1) GO TO 41
      J=1-I
   38 IF(J.GT.M2) GO TO 39
      JJ=J-L+M0
      JP=J+M0
      A(I,JJ)=A(I,JP)
      J=J+1
      GO TO 38
   39 CONTINUE
      L=L-1
      J=M2-L
   48 IF(J.GT.M2) GO TO 49
      JJ=J+M0
      A(I,JJ)=0.D0
      J=J+1
      GO TO 48
   49 CONTINUE
      I=I+1
      GO TO 42
   41 CONTINUE
      D1=1.D0
      ID2=0
      L=M1
      DO 50 K=1,N
      X=A(K,1)
      I=K
      IF(L.LT.N) L=L+1
      J=K+1
   52 IF(J.GT.L) GO TO 51
      IF(DABS(A(J,1)).LE.DABS(X)) GO TO 53
      X=A(J,1)
      I=J
   53 J=J+1
      GO TO 52
   51 INT(K)=I
      D1=D1*X
      IF(X.NE.0.D0) GO TO 54
      ID2=0
      IF(IE.EQ.1) GO TO 55
      FAIL=.TRUE.
      RETURN
   55 A(K,1)=NORM*MAC
   54 CONTINUE
      IF(D1.EQ.0.D0) GO TO 56
   58 IF(DABS(D1).LT.1.D0) GO TO 57
      ID2=ID2+4
      D1=D1*0.0625D0
      GO TO 58
   57 IF(DABS(D1).GE.0.0625D0) GO TO 71
      ID2=ID2-4
      D1=D1*16.D0
      GO TO 57
   71 CONTINUE
   56 IF(I.EQ.K) GO TO 61
      D1=-D1
      DO 60 J=1,MSUP
      X=A(K,J)
      A(K,J)=A(I,J)
      A(I,J)=X
   60 CONTINUE
   61 CONTINUE
      I=K+1
   63 IF(I.GT.L) GO TO 62
      JJ=I-K
      M(K,JJ)=A(I,1)/A(K,1)
      X=M(K,JJ)
      J=2
   68 IF(J.GT.MSUP) GO TO 69
      JJ=J-1
      A(I,JJ)=A(I,J)-X*A(K,J)
      J=J+1
      GO TO 68
   69 CONTINUE
      A(I,MSUP)=0.D0
      I=I+1
      GO TO 63
   62 CONTINUE
   50 CONTINUE
      RETURN
      END
